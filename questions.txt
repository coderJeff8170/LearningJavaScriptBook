when you put variables inside an object, does that mean they are not available outside
that object, except when called?
-as in user {name, age}

ask about //     return new Date().getFullYear() - age;

ask about //     return new Date().getFullYear() - user.age;
            //     return new Date().getFullYear() - this.age;

let globalFunc; //undefined global function
{
    let blockVar = 'a'; //block scoped variable
    globalFunc = function() {
        console.log(blockVar);
    }
}
globalFunc();   HOW COME globalfunc is available outside the block, even when you remove it's declaration?

ask about the closure with "not so safe after all"
//not sure of the implications of this, but i suspect that things within the closure can
//be changed? OOOOOOOHHHHHHH! Yah. You can change F from outside the closure by assigning
// it to a variable. This is why IIFEs are so important?

when we talk about the most recent elements on a stack, as in push and pop, are 
we talking about the end of the array, or just the most recent added (as in the fucking middle!?)
and when we talk about the oldest elements on a queue, as in shift and unshift, are 
we talking about the beginning of the array?

in the beginning the author mentions using consts as much as possible (that refer to a specific number or string1)
He says it's best to capitalize them so they're easy to recognize? what does he mean by this^^

how come you cant look up a subarray with indexOf?